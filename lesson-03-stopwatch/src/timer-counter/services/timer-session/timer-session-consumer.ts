import { LOCAL_STORAGE } from "../../utils/local-storage-const.ts";
import {
  TIMER_UPDATE_EVENT,
  type TimerUpdateEvent,
  UtilsTimerSession,
} from "../../utils/timer-utils.ts";
import { type TimerSession } from "./timer-session.ts";

/**
 * H√£y t∆∞·ªüng t∆∞·ª£ng TimerSessionConsumer nh∆∞ m·ªôt chi·∫øc ƒë·ªìng h·ªì th√¥ng minh trong m√°y t√≠nh!

  üéØ N√≥ l√†m g√¨?
  - Gi·ªëng nh∆∞ m·ªôt chi·∫øc ƒë·ªìng h·ªì b·∫•m gi·ªù theo d√µi th·ªùi gian ch∆°i game
  - Khi th·ªùi gian thay ƒë·ªïi, n√≥ s·∫Ω b√°o cho t·∫•t c·∫£ m·ªçi ng∆∞·ªùi bi·∫øt
  - Ngay c·∫£ khi b·∫°n m·ªü nhi·ªÅu tab tr√¨nh duy·ªát, t·∫•t c·∫£ ƒë·ªÅu bi·∫øt th·ªùi gian gi·ªëng nhau!
 */
class TimerSessionConsumer implements TimerSession {
  static #instance: TimerSessionConsumer;
  #listeners: ((event: TimerUpdateEvent<this>) => void)[] = [];

  public static getInstance(): TimerSessionConsumer {
    if (!this.#instance) {
      this.#instance = new TimerSessionConsumer();
    }
    return this.#instance;
  }

  // Khi c√≥ b·∫°n m·ªõi mu·ªën nghe tin t·ª©c v·ªÅ th·ªùi gian
  public addEventListener(
    eventName: string,
    callback: (event: TimerUpdateEvent<this>) => void,
  ): void {
    if (eventName === TIMER_UPDATE_EVENT) {
      // Th√™m b·∫°n v√†o danh s√°ch
      this.#listeners.push(callback);
      // Ngay l·∫≠p t·ª©c b√°o tin m·ªõi nh·∫•t
      this.#emitEvent(TIMER_UPDATE_EVENT);
      // B·∫Øt ƒë·∫ßu l·∫Øng nghe t·ª´ ngu·ªìn tin t·ª©c
      if (this.#listeners.length > 0) {
        globalThis.addEventListener("storage", this.#onStorage);
      }
    }
  }

  // Khi c√≥ b·∫°n kh√¥ng mu·ªën nghe tin n·ªØa
  removeEventListener(
    eventName: string,
    callback: (event: TimerUpdateEvent<this>) => void,
  ): void {
    if (eventName === TIMER_UPDATE_EVENT) {
      // X√≥a b·∫°n kh·ªèi danh s√°ch
      this.#listeners = this.#listeners.filter((listener) => listener !== callback);

      // N·∫øu kh√¥ng c√≤n ai quan t√¢m, th√¥i l·∫Øng nghe
      if (this.#listeners.length === 0) {
        globalThis.removeEventListener("storage", this.#onStorage);
      }
    }
  }

  // Khi ngu·ªìn tin t·ª©c thay ƒë·ªïi, g·ª≠i tin t·ª©c cho t·∫•t c·∫£ b·∫°n b√®
  #onStorage = (e: StorageEvent): void => {
    if (e.key === LOCAL_STORAGE.session_last) {
      this.#emitEvent(TIMER_UPDATE_EVENT);
    }
  };

  // G·ª≠i tin t·ª©c cho t·∫•t c·∫£ b·∫°n b√®
  #emitEvent(eventName: string): void {
    if (eventName === TIMER_UPDATE_EVENT) {
      // Chu·∫©n b·ªã n·ªôi dung ƒë·ªÉ g·ª≠i
      const event: TimerUpdateEvent<this> = {
        value: UtilsTimerSession.getValue(),
        target: this,
        targetName: this.constructor.name,
      };
      // G·ªçi ƒëi·ªán cho t·ª´ng ng∆∞·ªùi b·∫°n
      this.#listeners.forEach((listener) => listener(event));
    }
  }
}

export default TimerSessionConsumer;
